using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using UnityEngine;

namespace CharacterControl
{
    public class CharacterStateController : MonoBehaviour
    {
        [SerializeField]
        private int playerID;

        private GameObject game;
        private GameObject ui;

        private float healthPoints = 10000;

        private float superBar = 0;

        Stopwatch sw;

        [SerializeField]
        private Enums.CharState charState;

        public Enums.CharState GetCharState()
        {
            return this.charState;
        }

        public Enums.AttackState GetAttackState()
        {
            return this.attackState;
        }

        public float GetHP()
        {
            return this.healthPoints;
        }

        public float GetSB()
        {
            return this.superBar;
        }

        public Enums.FacingSide GetFacingSide()
        {
            return this.facing;
        }

        [SerializeField]
        private Enums.AttackState attackState;

        [SerializeField]
        private Enums.FacingSide facing;

		
		public void TranslateDInput(Misc.Enums.NumPad xAxis, Misc.Enums.NumPad yAxis)
        {
            if (inputList.Count == 20)
            {
                inputList.Clear();
            }

            if (xAxis == Misc.Enums.NumPad.Neutral)
            {
                if(yAxis == Misc.Enums.NumPad.Up)
                {
                    inputList.Add(Misc.Enums.Inputs.Up);
                }

                if (yAxis == Misc.Enums.NumPad.Neutral) 
                {
                    inputList.Add(Misc.Enums.Inputs.Neutral);
                }

                if(yAxis == Misc.Enums.NumPad.Down)
                {
                    inputList.Add(Misc.Enums.Inputs.Down);
                }

            }else if(xAxis ==  Misc.Enums.NumPad.Right)
            {
                if(facing == Misc.Enums.FacingSide.P1)
                {
                    if (yAxis == Misc.Enums.NumPad.Up)
                    {
                        inputList.Add(Misc.Enums.Inputs.Up);
                    }

                    if (yAxis == Misc.Enums.NumPad.Neutral)
                    {
                        inputList.Add(Misc.Enums.Inputs.Forward);
                    }

                    if (yAxis == Misc.Enums.NumPad.Down)
                    {
                        inputList.Add(Misc.Enums.Inputs.DownForward);
                    }
                } else
                {
                    if (yAxis == Misc.Enums.NumPad.Up)
                    {
                        inputList.Add(Misc.Enums.Inputs.Up);
                    }

                    if (yAxis == Misc.Enums.NumPad.Neutral)
                    {
                        inputList.Add(Misc.Enums.Inputs.Backward);
                    }

                    if (yAxis == Misc.Enums.NumPad.Down)
                    {
                        inputList.Add(Misc.Enums.Inputs.DownBack);
                    }
                }

            } else if(xAxis == Misc.Enums.NumPad.Left)
            {
                if (facing == Misc.Enums.FacingSide.P1)
                {
                    if (yAxis == Misc.Enums.NumPad.Up)
                    {
                        inputList.Add(Misc.Enums.Inputs.Up);
                    }

                    if (yAxis == Misc.Enums.NumPad.Neutral)
                    {
                        inputList.Add(Misc.Enums.Inputs.Backward);
                    }

                    if (yAxis == Misc.Enums.NumPad.Down)
                    {
                        inputList.Add(Misc.Enums.Inputs.DownBack);
                    }
                }
                else
                {
                    if (yAxis == Misc.Enums.NumPad.Up)
                    {
                        inputList.Add(Misc.Enums.Inputs.Up);
                    }

                    if (yAxis == Misc.Enums.NumPad.Neutral)
                    {
                        inputList.Add(Misc.Enums.Inputs.Forward);
                    }

                    if (yAxis == Misc.Enums.NumPad.Down)
                    {
                        inputList.Add(Misc.Enums.Inputs.DownForward);
                    }
                }
            }
            
        }
        // Use this for initialization
       private void Start()
        {
            charState = Enums.CharState.standing;
            attackState = Enums.AttackState.none;
			inputList = new List<Misc.Enums.Inputs>(20);
            sw = new Stopwatch();
            sw.Start();

            //update -> ui manager
            game = GameObject.Find("Game Manager");
            ui = GameObject.Find("Canvas");
            if (playerID == 1) ui.GetComponent<UIManager>().UpdateP1(healthPoints, superBar);
            if (playerID == 2) ui.GetComponent<UIManager>().UpdateP2(healthPoints, superBar);
        }

        public void SetState(Enums.CharState state)
        {
            charState = state;
        }

        public void SetAttackState(Enums.AttackState state)
        {
            attackState = state;
        }


        public void TakeDamage(float dmg)
        {
            healthPoints -= dmg;
            if (playerID == 1) ui.GetComponent<UIManager>().UpdateP1(healthPoints, superBar);
            if (playerID == 2) ui.GetComponent<UIManager>().UpdateP2(healthPoints, superBar);
            if (healthPoints<=0)
            {
                game.GetComponent<GameManager>().Die(playerID);
            }
        }

    }



}

